// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER") // USER, ADMIN, PHOTOGRAPHER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events Event[] @relation("EventPhotographer")
  photos Photo[]
  likes  Like[]

  @@map("users")
}

model Event {
  id                String   @id @default(cuid()) @map("_id")
  name              String
  description       String?
  date              DateTime
  location          String?
  status            String   @default("UPCOMING") // UPCOMING, ACTIVE, COMPLETED
  coverImageUrl     String?
  photographerEmail String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  photographer User    @relation("EventPhotographer", fields: [photographerEmail], references: [email])
  photos       Photo[]

  @@map("events")
}

model Photo {
  id           String   @id @default(cuid()) @map("_id")
  eventId      String
  userId       String
  url          String
  thumbnailUrl String?
  status       String   @default("PENDING") // PENDING, APPROVED, REJECTED
  faceDetected Boolean  @default(false)
  facesData    String? // Stockage des donn√©es de reconnaissance faciale (JSON string)
  tags         String   @default("[]") // Stockage des tags en JSON string
  isProcessed  Boolean  @default(false)
  uploadedAt   DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  event Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]

  @@map("photos")
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  photoId   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
  @@map("likes")
}
