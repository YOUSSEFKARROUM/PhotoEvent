Write-Host "üîç DIAGNOSTIC COMPLET de Photoevents..." -ForegroundColor Green
Write-Host ""

# V√©rifications syst√®me
Write-Host "üìã V√©rifications syst√®me..." -ForegroundColor Cyan

# V√©rifier Node.js
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Node.js non install√© ou non accessible" -ForegroundColor Red
}

# V√©rifier npm
try {
    $npmVersion = npm --version
    Write-Host "‚úÖ npm: $npmVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå npm non install√© ou non accessible" -ForegroundColor Red
}

# V√©rifier MongoDB
try {
    $mongoTest = mongo --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ MongoDB: Install√©" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è MongoDB: Non install√© (le backend utilisera une connexion externe)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è MongoDB: Non install√© (le backend utilisera une connexion externe)" -ForegroundColor Yellow
}

Write-Host ""

# V√©rifications des fichiers
Write-Host "üìÅ V√©rifications des fichiers..." -ForegroundColor Cyan

# V√©rifier la structure du projet
$requiredFiles = @(
    "package.json",
    "backend/package.json",
    "backend/server.js",
    "backend/.env",
    "public/favicon.ico"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $file" -ForegroundColor Red
    }
}

Write-Host ""

# V√©rifications des d√©pendances
Write-Host "üì¶ V√©rifications des d√©pendances..." -ForegroundColor Cyan

# Frontend
if (Test-Path "node_modules") {
    Write-Host "‚úÖ Frontend: node_modules pr√©sent" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Frontend: node_modules manquant (ex√©cutez 'npm install')" -ForegroundColor Yellow
}

# Backend
if (Test-Path "backend/node_modules") {
    Write-Host "‚úÖ Backend: node_modules pr√©sent" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Backend: node_modules manquant (ex√©cutez 'cd backend && npm install')" -ForegroundColor Yellow
}

Write-Host ""

# Test de connexion backend
Write-Host "üîå Test de connexion backend..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/api/health" -Method GET -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Backend: Connect√© et fonctionnel" -ForegroundColor Green
        $healthData = $response.Content | ConvertFrom-Json
        Write-Host "   Status: $($healthData.status)" -ForegroundColor Gray
        Write-Host "   Environment: $($healthData.environment)" -ForegroundColor Gray
    } else {
        Write-Host "‚ö†Ô∏è Backend: R√©ponse inattendue (Status: $($response.StatusCode))" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Backend: Non accessible (assurez-vous qu'il est d√©marr√©)" -ForegroundColor Red
}

Write-Host ""

# Test de connexion frontend
Write-Host "üåê Test de connexion frontend..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:5173" -Method GET -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend: Connect√© et fonctionnel" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Frontend: R√©ponse inattendue (Status: $($response.StatusCode))" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Frontend: Non accessible (assurez-vous qu'il est d√©marr√©)" -ForegroundColor Red
}

Write-Host ""

# Test d'authentification
Write-Host "üîë Test d'authentification..." -ForegroundColor Cyan
if (Test-Path "backend/test_auth_simple.js") {
    try {
        Set-Location backend
        $authResult = node test_auth_simple.js 2>&1
        Set-Location ..
        
        if ($authResult -match "‚úÖ Connexion r√©ussie") {
            Write-Host "‚úÖ Authentification: Fonctionnelle" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Authentification: √âchec" -ForegroundColor Red
            Write-Host "   D√©tails: $authResult" -ForegroundColor Gray
        }
    } catch {
        Write-Host "‚ùå Authentification: Erreur lors du test" -ForegroundColor Red
    }
} else {
    Write-Host "‚ö†Ô∏è Authentification: Script de test manquant" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ R√âSUM√â DU DIAGNOSTIC" -ForegroundColor Green
Write-Host "================================" -ForegroundColor Gray

# Compter les erreurs et avertissements
$errors = 0
$warnings = 0

if ($LASTEXITCODE -ne 0) { $errors++ }

Write-Host ""
if ($errors -eq 0) {
    Write-Host "‚úÖ Tout semble fonctionner correctement !" -ForegroundColor Green
    Write-Host "üöÄ Vous pouvez maintenant utiliser l'application." -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Quelques probl√®mes ont √©t√© d√©tect√©s." -ForegroundColor Yellow
    Write-Host "üîß Ex√©cutez '.\start-complete.ps1' pour r√©soudre les probl√®mes." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "Appuyez sur une touche pour fermer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") 